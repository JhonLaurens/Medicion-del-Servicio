#!/usr/bin/env python3
"""
Script para validar que el eje Y de las gr√°ficas de distribuci√≥n no tenga desbordamientos
y que todos los valores est√©n en el rango correcto de 0-100%.
"""

import pandas as pd
import json
import sys

def validar_datos_porcentajes():
    """Valida que todos los porcentajes calculados est√©n en el rango 0-100%"""
    try:
        # Cargar datos
        print("üìä Cargando datos CSV...")
        df = pd.read_csv('public/datos.csv', sep=';')
        print(f"‚úÖ Datos cargados: {len(df)} registros")
        
        # M√©tricas a validar con nombres reales de columnas del CSV
        metricas = [
            ('En general   ¬øLa informaci√≥n suministrada en nuestros canales de atenci√≥n fue clara y f√°cil de comprender?', 'Claridad de la Informaci√≥n (Atenci√≥n)'),
            ('En general   ¬øQu√© tan satisfecho se encuentra con los servicios que le ofrece Coltefinanciera?', 'Satisfacci√≥n General'),
            ('Asumiendo que otra entidad financiera le ofreciera al mismo precio los mismos productos y servicios que usted tiene actualmente con Coltefinanciera   ¬øQu√© tan probable es que usted contin√∫e siendo cliente de Coltefinanciera?', 'Lealtad'),
            ('¬øQu√© tan probable es que usted le recomiende Coltefinanciera a sus colegas   familiares o amigos?', 'Recomendaci√≥n')
        ]
        
        problemas_encontrados = []
        
        for columna, nombre in metricas:
            if columna not in df.columns:
                problemas_encontrados.append(f"‚ùå Columna '{columna}' no encontrada")
                continue
                
            print(f"\nüîç Validando {nombre}...")
            
            # Filtrar datos v√°lidos (1-5)
            datos_validos = df[df[columna].between(1, 5, inclusive='both')]
            
            if len(datos_validos) == 0:
                problemas_encontrados.append(f"‚ùå {nombre}: No hay datos v√°lidos")
                continue
                
            # Calcular distribuci√≥n por segmento
            segmentos = [
                ('Consolidado', datos_validos),
                ('Personas', datos_validos[datos_validos['SEGMENTO'] == 'PERSONAS']),
                ('Empresas', datos_validos[datos_validos['SEGMENTO'] == 'EMPRESAS'])
            ]
            
            for seg_nombre, seg_data in segmentos:
                if len(seg_data) == 0:
                    continue
                    
                # Calcular porcentajes
                total = len(seg_data)
                rating5 = len(seg_data[seg_data[columna] == 5]) / total * 100
                rating4 = len(seg_data[seg_data[columna] == 4]) / total * 100
                rating123 = len(seg_data[seg_data[columna].isin([1, 2, 3])]) / total * 100
                
                # Validar rango
                porcentajes = [rating5, rating4, rating123]
                suma_total = sum(porcentajes)
                
                print(f"  üìà {seg_nombre}: 5={rating5:.1f}%, 4={rating4:.1f}%, 1-3={rating123:.1f}% (Total: {suma_total:.1f}%)")
                
                # Verificar que ning√∫n porcentaje est√© fuera del rango
                for i, pct in enumerate(porcentajes):
                    if pct < 0 or pct > 100:
                        problemas_encontrados.append(f"‚ùå {nombre} - {seg_nombre}: Porcentaje fuera de rango: {pct:.2f}%")
                
                # Verificar que la suma sea aproximadamente 100%
                if abs(suma_total - 100) > 0.1:
                    problemas_encontrados.append(f"‚ö†Ô∏è {nombre} - {seg_nombre}: Suma de porcentajes no es 100%: {suma_total:.2f}%")
        
        # Resumen
        print(f"\n{'='*60}")
        print("üìã RESUMEN DE VALIDACI√ìN")
        print(f"{'='*60}")
        
        if problemas_encontrados:
            print(f"‚ùå Se encontraron {len(problemas_encontrados)} problemas:")
            for problema in problemas_encontrados:
                print(f"  {problema}")
            return False
        else:
            print("‚úÖ Todos los porcentajes est√°n en el rango v√°lido 0-100%")
            print("‚úÖ No se detectaron problemas de desbordamiento en el eje Y")
            return True
            
    except Exception as e:
        print(f"‚ùå Error durante la validaci√≥n: {e}")
        return False

def validar_configuracion_graficas():
    """Valida la configuraci√≥n del eje Y en el c√≥digo del dashboard"""
    try:
        print(f"\n{'='*60}")
        print("üîß VALIDANDO CONFIGURACI√ìN DE GR√ÅFICAS")
        print(f"{'='*60}")
        
        # Leer el archivo del dashboard
        with open('src/components/GeneralDashboard.tsx', 'r', encoding='utf-8') as f:
            codigo = f.read()
        
        # Verificar configuraciones cr√≠ticas
        configuraciones_esperadas = [
            ('domain={[0, 100]}', 'Dominio del eje Y configurado'),
            ('tickFormatter={(value) =>', 'Formato de porcentaje en ticks mejorado'),
            ('Porcentaje (%)', 'Etiqueta del eje Y'),
            ('colors.rating5', 'Uso de colores definidos'),
            ('colors.rating4', 'Uso de colores definidos'),
            ('colors.rating123', 'Uso de colores definidos'),
            ('allowDataOverflow={false}', 'Prevenci√≥n de desbordamiento configurada'),
            ('ticks={[0, 20, 40, 60, 80, 100]}', 'Ticks espec√≠ficos configurados')
        ]
        
        problemas_config = []
        
        for config, descripcion in configuraciones_esperadas:
            if config in codigo:
                print(f"‚úÖ {descripcion}: Encontrado")
            else:
                problemas_config.append(f"‚ùå {descripcion}: No encontrado - '{config}'")
        
        # Verificar que no haya configuraciones problem√°ticas
        configuraciones_problematicas = [
            ('domain={[0, \'dataMax\']}', 'Dominio autom√°tico que puede causar desbordamiento'),
            ('domain={[\'dataMin\', \'dataMax\']}', 'Dominio autom√°tico que puede causar desbordamiento'),
            ('domain={[0, 120]}', 'Dominio mayor a 100%')
        ]
        
        for config, descripcion in configuraciones_problematicas:
            if config in codigo:
                problemas_config.append(f"‚ö†Ô∏è {descripcion}: Encontrado - '{config}'")
        
        if problemas_config:
            print(f"\n‚ùå Problemas de configuraci√≥n encontrados:")
            for problema in problemas_config:
                print(f"  {problema}")
            return False
        else:
            print(f"\n‚úÖ Configuraci√≥n del eje Y es correcta")
            return True
            
    except Exception as e:
        print(f"‚ùå Error validando configuraci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîç VALIDACI√ìN DE EJE Y EN GR√ÅFICAS DE DISTRIBUCI√ìN")
    print("=" * 60)
    
    # Validar datos
    datos_ok = validar_datos_porcentajes()
    
    # Validar configuraci√≥n
    config_ok = validar_configuracion_graficas()
    
    # Resultado final
    print(f"\n{'='*60}")
    print("üéØ RESULTADO FINAL")
    print(f"{'='*60}")
    
    if datos_ok and config_ok:
        print("‚úÖ VALIDACI√ìN EXITOSA: No hay problemas de desbordamiento en el eje Y")
        print("‚úÖ Las gr√°ficas de distribuci√≥n est√°n correctamente configuradas")
        return 0
    else:
        print("‚ùå VALIDACI√ìN FALLIDA: Se encontraron problemas que requieren correcci√≥n")
        return 1

if __name__ == "__main__":
    exit(main())
