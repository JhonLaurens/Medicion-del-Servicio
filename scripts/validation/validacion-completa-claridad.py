#!/usr/bin/env python3
"""
üìå Script de validaci√≥n completo para la m√©trica "Claridad de la Informaci√≥n (Atenci√≥n)"
Este script verifica la presencia, datos y visualizaci√≥n de la m√©trica en el dashboard.
"""

import pandas as pd
import json
import os
import sys

def main():
    print("üîç VALIDACI√ìN COMPLETA: M√âTRICA CLARIDAD DE LA INFORMACI√ìN")
    print("=" * 70)
    
    print("\n1Ô∏è‚É£ VERIFICACI√ìN DE DATOS EN CSV")
    print("-" * 40)
    
    # Verificar archivo CSV
    csv_path = 'public/datos.csv'
    if not os.path.exists(csv_path):
        print(f"‚ùå ERROR: No se encontr√≥ {csv_path}")
        return False
    
    try:
        df = pd.read_csv(csv_path, sep=';', encoding='utf-8')
        print(f"‚úÖ CSV cargado: {len(df)} registros")
    except Exception as e:
        print(f"‚ùå Error cargando CSV: {e}")
        return False
    
    # Buscar columna de claridad
    claridad_col = None
    for col in df.columns:
        if 'informaci√≥n suministrada' in col and 'clara' in col:
            claridad_col = col
            break
    
    if not claridad_col:
        print("‚ùå No se encontr√≥ la columna de claridad de informaci√≥n")
        return False
    
    print(f"‚úÖ Columna encontrada: '{claridad_col[:60]}...'")
    
    # Analizar datos de claridad
    claridad_data = pd.to_numeric(df[claridad_col], errors='coerce')
    valid_data = claridad_data.dropna()
    
    if len(valid_data) == 0:
        print("‚ùå No hay datos v√°lidos para Claridad de la Informaci√≥n")
        return False
    
    print(f"‚úÖ Datos v√°lidos: {len(valid_data)}/{len(df)} ({len(valid_data)/len(df)*100:.1f}%)")
    print(f"‚úÖ Promedio: {valid_data.mean():.2f}")
    
    # Distribuci√≥n por calificaci√≥n
    print(f"\nüìä DISTRIBUCI√ìN DE CALIFICACIONES:")
    for rating in sorted(valid_data.unique()):
        count = (valid_data == rating).sum()
        pct = count / len(valid_data) * 100
        print(f"   ‚Ä¢ Calificaci√≥n {int(rating)}: {count} ({pct:.1f}%)")
    
    # An√°lisis por segmento
    if 'SEGMENTO' in df.columns:
        print(f"\nüè¢ AN√ÅLISIS POR SEGMENTO:")
        for segmento in df['SEGMENTO'].dropna().unique():
            seg_data = pd.to_numeric(df[df['SEGMENTO'] == segmento][claridad_col], errors='coerce').dropna()
            if len(seg_data) > 0:
                print(f"   ‚Ä¢ {segmento}: promedio {seg_data.mean():.2f} (n={len(seg_data)})")
    
    print("\n2Ô∏è‚É£ VERIFICACI√ìN DE CONFIGURACI√ìN DEL C√ìDIGO")
    print("-" * 40)
    
    # Verificar archivos de c√≥digo
    files_to_check = [
        'src/services/dataService.ts',
        'src/components/GeneralDashboard.tsx',
        'src/types/index.ts'
    ]
    
    all_files_exist = True
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path} existe")
        else:
            print(f"‚ùå {file_path} no encontrado")
            all_files_exist = False
    
    if not all_files_exist:
        print("‚ùå Faltan archivos de c√≥digo necesarios")
        return False
    
    # Verificar configuraci√≥n en dataService.ts
    try:
        with open('src/services/dataService.ts', 'r', encoding='utf-8') as f:
            content = f.read()
            
        has_claridad_mapping = 'claridad_informacion' in content
        has_getKPI_function = 'getKPIData()' in content
        
        print(f"‚úÖ Mapeo de claridad_informacion: {'S√ç' if has_claridad_mapping else 'NO'}")
        print(f"‚úÖ Funci√≥n getKPIData: {'S√ç' if has_getKPI_function else 'NO'}")
        
        # Verificar orden de m√©tricas
        if "{ key: 'claridad_informacion', name: 'Claridad de la Informaci√≥n (Atenci√≥n)' }" in content:
            print("‚úÖ M√©trica de claridad est√° configurada correctamente")
        else:
            print("‚ö†Ô∏è La configuraci√≥n de la m√©trica puede tener problemas")
            
    except Exception as e:
        print(f"‚ùå Error verificando dataService.ts: {e}")
        return False
    
    print("\n3Ô∏è‚É£ RECOMENDACIONES")
    print("-" * 40)
    
    print("üìã ESTADO ACTUAL:")
    print("   ‚Ä¢ ‚úÖ Los datos de 'Claridad de la Informaci√≥n' est√°n presentes en el CSV")
    print("   ‚Ä¢ ‚úÖ La m√©trica est√° configurada en el c√≥digo")
    print("   ‚Ä¢ ‚úÖ Los archivos necesarios existen")
    
    print("\nüéØ POSIBLES CAUSAS SI NO APARECE EN EL DASHBOARD:")
    print("   1. üåê Cach√© del navegador - Hacer Ctrl+F5 para recargar")
    print("   2. üì± Problema de responsive - Verificar en pantalla grande")
    print("   3. üîÑ El servicio no termin√≥ de cargar - Revisar consola del navegador")
    print("   4. üé® Error de CSS - La m√©trica puede estar oculta visualmente")
    
    print("\nüõ†Ô∏è PASOS PARA VERIFICAR:")
    print("   1. Abrir http://localhost:5174/ en el navegador")
    print("   2. Navegar a 'Dashboard General' en el men√∫ lateral")
    print("   3. Abrir DevTools (F12) y revisar la consola")
    print("   4. Buscar logs que muestren 'üé® Rendering KPI 1: Claridad de la Informaci√≥n'")
    print("   5. Verificar que aparezcan 4 tarjetas KPI en la parte superior")
    
    print("\n‚úÖ VALIDACI√ìN COMPLETADA - LOS DATOS EST√ÅN LISTOS")
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ ¬°TODO EST√Å CONFIGURADO CORRECTAMENTE!")
        print("Si no ves la m√©trica en el dashboard, revisa el cach√© del navegador.")
        sys.exit(0)
    else:
        print("\n‚ùå SE ENCONTRARON PROBLEMAS QUE NECESITAN CORRECCI√ìN")
        sys.exit(1)
