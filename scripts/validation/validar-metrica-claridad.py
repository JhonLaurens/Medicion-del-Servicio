# üìå Validaci√≥n de M√©tricas: Verificaci√≥n de "Claridad de la Informaci√≥n"

import pandas as pd
import numpy as np

def validar_metrica_claridad():
    """
    Valida que la m√©trica "Claridad de la Informaci√≥n (Atenci√≥n)" 
    est√© correctamente incluida y tenga datos v√°lidos
    """
    print("üìä VALIDACI√ìN DE M√âTRICA: CLARIDAD DE LA INFORMACI√ìN")
    print("=" * 60)
    
    try:
        # Leer el archivo CSV
        print("üìÇ LEYENDO ARCHIVO DE DATOS...")
        df = pd.read_csv('public/datos.csv', delimiter=';', encoding='utf-8')
        print(f"   ‚Ä¢ Total de registros: {len(df):,}")
        print()
        
        # Identificar la columna de claridad
        claridad_column = None
        for col in df.columns:
            if 'informaci√≥n suministrada' in col.lower() and 'clara y f√°cil' in col.lower():
                claridad_column = col
                break
        
        if not claridad_column:
            print("‚ùå ERROR: No se encontr√≥ la columna de 'Claridad de la Informaci√≥n'")
            return
        
        print(f"‚úÖ COLUMNA ENCONTRADA:")
        print(f"   ‚Ä¢ Nombre: {claridad_column}")
        print()
        
        # An√°lisis de la m√©trica
        claridad_data = df[claridad_column].dropna()
        
        print("üìä AN√ÅLISIS DE LA M√âTRICA:")
        print(f"   ‚Ä¢ Respuestas v√°lidas: {len(claridad_data):,}")
        print(f"   ‚Ä¢ Respuestas faltantes: {len(df) - len(claridad_data):,}")
        print(f"   ‚Ä¢ Porcentaje de completitud: {(len(claridad_data)/len(df)*100):.1f}%")
        print()
        
        # Distribuci√≥n de valores
        value_counts = claridad_data.value_counts().sort_index()
        print("üìà DISTRIBUCI√ìN DE CALIFICACIONES:")
        total_responses = len(claridad_data)
        for value in range(1, 6):
            count = value_counts.get(value, 0)
            percentage = (count / total_responses * 100) if total_responses > 0 else 0
            print(f"   ‚Ä¢ Calificaci√≥n {value}: {count:,} respuestas ({percentage:.1f}%)")
        print()
        
        # Estad√≠sticas descriptivas
        if len(claridad_data) > 0:
            promedio = claridad_data.mean()
            mediana = claridad_data.median()
            std = claridad_data.std()
            
            print("üìä ESTAD√çSTICAS DESCRIPTIVAS:")
            print(f"   ‚Ä¢ Promedio: {promedio:.2f}")
            print(f"   ‚Ä¢ Mediana: {mediana:.1f}")
            print(f"   ‚Ä¢ Desviaci√≥n est√°ndar: {std:.2f}")
            print(f"   ‚Ä¢ Valor m√≠nimo: {claridad_data.min()}")
            print(f"   ‚Ä¢ Valor m√°ximo: {claridad_data.max()}")
            print()
            
            # An√°lisis por segmento
            print("üìã AN√ÅLISIS POR SEGMENTO:")
            for segmento in df['SEGMENTO'].unique():
                if pd.notna(segmento):
                    segmento_data = df[df['SEGMENTO'] == segmento][claridad_column].dropna()
                    if len(segmento_data) > 0:
                        promedio_seg = segmento_data.mean()
                        print(f"   ‚Ä¢ {segmento}: {promedio_seg:.2f} (n={len(segmento_data):,})")
            print()
            
            # An√°lisis de calidad de datos
            print("üîç AN√ÅLISIS DE CALIDAD DE DATOS:")
            
            # Verificar rango v√°lido (1-5)
            valores_invalidos = claridad_data[(claridad_data < 1) | (claridad_data > 5)]
            if len(valores_invalidos) > 0:
                print(f"   ‚ö†Ô∏è  Valores fuera de rango (1-5): {len(valores_invalidos)}")
            else:
                print("   ‚úÖ Todos los valores est√°n en el rango v√°lido (1-5)")
            
            # Verificar sesgo hacia valores extremos
            alta_satisfaccion = len(claridad_data[claridad_data >= 4])
            porcentaje_alta = (alta_satisfaccion / total_responses * 100)
            
            if porcentaje_alta >= 70:
                print(f"   üìà Alta satisfacci√≥n: {porcentaje_alta:.1f}% calific√≥ 4 o 5")
            elif porcentaje_alta <= 30:
                print(f"   üìâ Baja satisfacci√≥n: {porcentaje_alta:.1f}% calific√≥ 4 o 5")
            else:
                print(f"   ‚öñÔ∏è  Distribuci√≥n equilibrada: {porcentaje_alta:.1f}% calific√≥ 4 o 5")
            
            print()
            
            # Comparaci√≥n con otras m√©tricas
            print("‚öñÔ∏è  COMPARACI√ìN CON OTRAS M√âTRICAS:")
            
            otras_metricas = {
                'Satisfacci√≥n General': 'En general   ¬øQu√© tan satisfecho se encuentra con los servicios que le ofrece Coltefinanciera?',
                'Recomendaci√≥n': '¬øQu√© tan probable es que usted le recomiende Coltefinanciera a sus colegas   familiares o amigos?',
                'Lealtad': 'Asumiendo que otra entidad financiera le ofreciera al mismo precio los mismos productos y servicios que usted tiene actualmente con Coltefinanciera   ¬øQu√© tan probable es que usted contin√∫e siendo cliente de Coltefinanciera?'
            }
            
            for nombre, columna in otras_metricas.items():
                if columna in df.columns:
                    otros_datos = df[columna].dropna()
                    if len(otros_datos) > 0:
                        otro_promedio = otros_datos.mean()
                        diferencia = promedio - otro_promedio
                        if abs(diferencia) < 0.1:
                            status = "similar"
                            emoji = "‚âà"
                        elif diferencia > 0:
                            status = "superior"
                            emoji = "‚ÜóÔ∏è"
                        else:
                            status = "inferior"
                            emoji = "‚ÜòÔ∏è"
                        
                        print(f"   ‚Ä¢ vs {nombre}: {otro_promedio:.2f} {emoji} (diferencia: {diferencia:+.2f})")
            
            print()
            
            # Recomendaciones
            print("üìù ESTADO DE LA M√âTRICA:")
            if promedio >= 4.0:
                print("   ‚úÖ EXCELENTE: La claridad de informaci√≥n tiene una puntuaci√≥n muy alta")
            elif promedio >= 3.5:
                print("   ‚úÖ BUENO: La claridad de informaci√≥n tiene una puntuaci√≥n aceptable")
            elif promedio >= 3.0:
                print("   ‚ö†Ô∏è  REGULAR: La claridad de informaci√≥n necesita mejoras")
            else:
                print("   ‚ùå CR√çTICO: La claridad de informaci√≥n requiere atenci√≥n inmediata")
            
            if porcentaje_alta >= 80:
                print("   üéØ Muy alta satisfacci√≥n con la claridad de informaci√≥n")
            elif porcentaje_alta >= 60:
                print("   üìà Buena satisfacci√≥n con la claridad de informaci√≥n")
            else:
                print("   üìâ Oportunidad de mejora en claridad de informaci√≥n")
                
        else:
            print("‚ùå No hay datos v√°lidos para analizar")
            
    except Exception as e:
        print(f"‚ùå ERROR AL PROCESAR EL ARCHIVO: {str(e)}")

def verificar_inclusion_dashboard():
    """
    Verifica que las 4 m√©tricas est√©n incluidas en el dashboard
    """
    print("\n" + "=" * 60)
    print("üé® VERIFICACI√ìN DE INCLUSI√ìN EN DASHBOARD")
    print("=" * 60)
    
    metricas_esperadas = [
        "Claridad de la Informaci√≥n (Atenci√≥n)",
        "Satisfacci√≥n General", 
        "Lealtad",
        "Recomendaci√≥n"
    ]
    
    print("üìã M√âTRICAS QUE DEBER√çAN APARECER EN EL DASHBOARD:")
    for i, metrica in enumerate(metricas_esperadas, 1):
        print(f"   {i}. {metrica}")
    
    print("\n‚úÖ CORRECCI√ìN APLICADA:")
    print("   ‚Ä¢ Se agreg√≥ 'Claridad de la Informaci√≥n' a getKPIData()")
    print("   ‚Ä¢ Se cambi√≥ el grid de 3 a 4 columnas (md:grid-cols-2 lg:grid-cols-4)")
    print("   ‚Ä¢ Los gr√°ficos se generan din√°micamente para todas las m√©tricas")
    
    print("\nüéØ RESULTADO ESPERADO:")
    print("   ‚Ä¢ 4 tarjetas KPI en la parte superior")
    print("   ‚Ä¢ 4 gr√°ficos de distribuci√≥n por calificaci√≥n")
    print("   ‚Ä¢ Coherencia entre Ficha T√©cnica y Dashboard")

if __name__ == "__main__":
    validar_metrica_claridad()
    verificar_inclusion_dashboard()
    
    print("\n" + "="*60)
    print("‚úÖ VALIDACI√ìN COMPLETADA")
    print("="*60)
