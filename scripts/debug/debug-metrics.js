// Script para verificar las m√©tricas generadas
import { satisfactionDataService } from './src/services/dataService.ts';

async function debugMetrics() {
  try {
    console.log('üîç Iniciando verificaci√≥n de m√©tricas...');
    
    // Cargar datos
    await satisfactionDataService.loadData();
    console.log('‚úÖ Datos cargados exitosamente');
    
    // Obtener m√©tricas KPI
    const kpiData = satisfactionDataService.getKPIData();
    
    console.log('\nüìä RESUMEN DE M√âTRICAS:');
    console.log('Total de m√©tricas generadas:', kpiData.length);
    console.log('M√©tricas encontradas:');
    
    kpiData.forEach((metric, index) => {
      console.log(`${index + 1}. ${metric.metric}`);
      console.log(`   - Consolidado: ${metric.consolidado.average.toFixed(2)}`);
      console.log(`   - Personas: ${metric.personas.average.toFixed(2)} (${metric.personas.total} respuestas)`);
      console.log(`   - Empresarial: ${metric.empresarial.average.toFixed(2)} (${metric.empresarial.total} respuestas)`);
      console.log('');
    });
    
    // Verificar m√©tricas espec√≠ficas esperadas
    const expectedMetrics = [
      'Satisfacci√≥n General',
      'Lealtad', 
      'Recomendaci√≥n (NPS)',
      'Claridad de Informaci√≥n'
    ];
    
    console.log('\nüéØ VERIFICACI√ìN DE M√âTRICAS ESPERADAS:');
    expectedMetrics.forEach(expectedMetric => {
      const found = kpiData.find(kpi => kpi.metric === expectedMetric);
      if (found) {
        console.log(`‚úÖ ${expectedMetric}: ENCONTRADA`);
      } else {
        console.log(`‚ùå ${expectedMetric}: NO ENCONTRADA`);
        // Buscar m√©tricas similares
        const similar = kpiData.filter(kpi => 
          kpi.metric.toLowerCase().includes(expectedMetric.toLowerCase().split(' ')[0])
        );
        if (similar.length > 0) {
          console.log(`   M√©tricas similares: ${similar.map(s => s.metric).join(', ')}`);
        }
      }
    });
    
    console.log('\nüîç TODAS LAS M√âTRICAS DISPONIBLES:');
    kpiData.forEach(metric => {
      console.log(`- "${metric.metric}"`);
    });
    
  } catch (error) {
    console.error('‚ùå Error al verificar m√©tricas:', error);
  }
}

debugMetrics();